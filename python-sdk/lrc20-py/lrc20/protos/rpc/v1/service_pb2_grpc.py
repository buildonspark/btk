# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from lrc20.protos.rpc.v1 import service_pb2 as rpc_dot_v1_dot_service__pb2


class SparkServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendSparkTx = channel.unary_unary(
            "/rpc.v1.SparkService/SendSparkTx",
            request_serializer=rpc_dot_v1_dot_service__pb2.SendSparkTxRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.SendSparkSignature = channel.unary_unary(
            "/rpc.v1.SparkService/SendSparkSignature",
            request_serializer=rpc_dot_v1_dot_service__pb2.SendSparkSignatureRequest.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.ListSparkTxs = channel.unary_unary(
            "/rpc.v1.SparkService/ListSparkTxs",
            request_serializer=rpc_dot_v1_dot_service__pb2.ListSparkTxsRequest.SerializeToString,
            response_deserializer=rpc_dot_v1_dot_service__pb2.ListSparkTxsResponse.FromString,
        )
        self.GetSparkTx = channel.unary_unary(
            "/rpc.v1.SparkService/GetSparkTx",
            request_serializer=rpc_dot_v1_dot_service__pb2.GetSparkTxRequest.SerializeToString,
            response_deserializer=rpc_dot_v1_dot_service__pb2.GetSparkTxResponse.FromString,
        )
        self.VerifySparkTx = channel.unary_unary(
            "/rpc.v1.SparkService/VerifySparkTx",
            request_serializer=rpc_dot_v1_dot_service__pb2.VerifySparkTxRequest.SerializeToString,
            response_deserializer=rpc_dot_v1_dot_service__pb2.VerifySparkTxResponse.FromString,
        )


class SparkServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendSparkTx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SendSparkSignature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListSparkTxs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetSparkTx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def VerifySparkTx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_SparkServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SendSparkTx": grpc.unary_unary_rpc_method_handler(
            servicer.SendSparkTx,
            request_deserializer=rpc_dot_v1_dot_service__pb2.SendSparkTxRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        "SendSparkSignature": grpc.unary_unary_rpc_method_handler(
            servicer.SendSparkSignature,
            request_deserializer=rpc_dot_v1_dot_service__pb2.SendSparkSignatureRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        "ListSparkTxs": grpc.unary_unary_rpc_method_handler(
            servicer.ListSparkTxs,
            request_deserializer=rpc_dot_v1_dot_service__pb2.ListSparkTxsRequest.FromString,
            response_serializer=rpc_dot_v1_dot_service__pb2.ListSparkTxsResponse.SerializeToString,
        ),
        "GetSparkTx": grpc.unary_unary_rpc_method_handler(
            servicer.GetSparkTx,
            request_deserializer=rpc_dot_v1_dot_service__pb2.GetSparkTxRequest.FromString,
            response_serializer=rpc_dot_v1_dot_service__pb2.GetSparkTxResponse.SerializeToString,
        ),
        "VerifySparkTx": grpc.unary_unary_rpc_method_handler(
            servicer.VerifySparkTx,
            request_deserializer=rpc_dot_v1_dot_service__pb2.VerifySparkTxRequest.FromString,
            response_serializer=rpc_dot_v1_dot_service__pb2.VerifySparkTxResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "rpc.v1.SparkService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class SparkService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendSparkTx(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rpc.v1.SparkService/SendSparkTx",
            rpc_dot_v1_dot_service__pb2.SendSparkTxRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SendSparkSignature(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rpc.v1.SparkService/SendSparkSignature",
            rpc_dot_v1_dot_service__pb2.SendSparkSignatureRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListSparkTxs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rpc.v1.SparkService/ListSparkTxs",
            rpc_dot_v1_dot_service__pb2.ListSparkTxsRequest.SerializeToString,
            rpc_dot_v1_dot_service__pb2.ListSparkTxsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetSparkTx(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rpc.v1.SparkService/GetSparkTx",
            rpc_dot_v1_dot_service__pb2.GetSparkTxRequest.SerializeToString,
            rpc_dot_v1_dot_service__pb2.GetSparkTxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def VerifySparkTx(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rpc.v1.SparkService/VerifySparkTx",
            rpc_dot_v1_dot_service__pb2.VerifySparkTxRequest.SerializeToString,
            rpc_dot_v1_dot_service__pb2.VerifySparkTxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
