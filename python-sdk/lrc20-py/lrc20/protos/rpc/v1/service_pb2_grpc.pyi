"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import rpc.v1.service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(
    collections.abc.AsyncIterator[_T],
    collections.abc.Iterator[_T],
    metaclass=abc.ABCMeta,
): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class SparkServiceStub:
    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    SendSparkTx: grpc.UnaryUnaryMultiCallable[
        rpc.v1.service_pb2.SendSparkTxRequest,
        google.protobuf.empty_pb2.Empty,
    ]

    SendSparkSignature: grpc.UnaryUnaryMultiCallable[
        rpc.v1.service_pb2.SendSparkSignatureRequest,
        google.protobuf.empty_pb2.Empty,
    ]

    ListSparkTxs: grpc.UnaryUnaryMultiCallable[
        rpc.v1.service_pb2.ListSparkTxsRequest,
        rpc.v1.service_pb2.ListSparkTxsResponse,
    ]

    GetSparkTx: grpc.UnaryUnaryMultiCallable[
        rpc.v1.service_pb2.GetSparkTxRequest,
        rpc.v1.service_pb2.GetSparkTxResponse,
    ]

    VerifySparkTx: grpc.UnaryUnaryMultiCallable[
        rpc.v1.service_pb2.VerifySparkTxRequest,
        rpc.v1.service_pb2.VerifySparkTxResponse,
    ]

class SparkServiceAsyncStub:
    SendSparkTx: grpc.aio.UnaryUnaryMultiCallable[
        rpc.v1.service_pb2.SendSparkTxRequest,
        google.protobuf.empty_pb2.Empty,
    ]

    SendSparkSignature: grpc.aio.UnaryUnaryMultiCallable[
        rpc.v1.service_pb2.SendSparkSignatureRequest,
        google.protobuf.empty_pb2.Empty,
    ]

    ListSparkTxs: grpc.aio.UnaryUnaryMultiCallable[
        rpc.v1.service_pb2.ListSparkTxsRequest,
        rpc.v1.service_pb2.ListSparkTxsResponse,
    ]

    GetSparkTx: grpc.aio.UnaryUnaryMultiCallable[
        rpc.v1.service_pb2.GetSparkTxRequest,
        rpc.v1.service_pb2.GetSparkTxResponse,
    ]

    VerifySparkTx: grpc.aio.UnaryUnaryMultiCallable[
        rpc.v1.service_pb2.VerifySparkTxRequest,
        rpc.v1.service_pb2.VerifySparkTxResponse,
    ]

class SparkServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def SendSparkTx(
        self,
        request: rpc.v1.service_pb2.SendSparkTxRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        google.protobuf.empty_pb2.Empty,
        collections.abc.Awaitable[google.protobuf.empty_pb2.Empty],
    ]: ...
    @abc.abstractmethod
    def SendSparkSignature(
        self,
        request: rpc.v1.service_pb2.SendSparkSignatureRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        google.protobuf.empty_pb2.Empty,
        collections.abc.Awaitable[google.protobuf.empty_pb2.Empty],
    ]: ...
    @abc.abstractmethod
    def ListSparkTxs(
        self,
        request: rpc.v1.service_pb2.ListSparkTxsRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        rpc.v1.service_pb2.ListSparkTxsResponse,
        collections.abc.Awaitable[rpc.v1.service_pb2.ListSparkTxsResponse],
    ]: ...
    @abc.abstractmethod
    def GetSparkTx(
        self,
        request: rpc.v1.service_pb2.GetSparkTxRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        rpc.v1.service_pb2.GetSparkTxResponse,
        collections.abc.Awaitable[rpc.v1.service_pb2.GetSparkTxResponse],
    ]: ...
    @abc.abstractmethod
    def VerifySparkTx(
        self,
        request: rpc.v1.service_pb2.VerifySparkTxRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        rpc.v1.service_pb2.VerifySparkTxResponse,
        collections.abc.Awaitable[rpc.v1.service_pb2.VerifySparkTxResponse],
    ]: ...

def add_SparkServiceServicer_to_server(
    servicer: SparkServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...
