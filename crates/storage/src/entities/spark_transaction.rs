//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use super::sea_orm_active_enums::OperationType;
use super::sea_orm_active_enums::Status;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "spark_transaction")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", unique)]
    pub tx_hash: Vec<u8>,
    pub operation_type: OperationType,
    pub status: Status,
    pub network: Option<i32>,
    pub created_at: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::operator_pubkey::Entity")]
    OperatorPubkey,
    #[sea_orm(has_many = "super::operator_signature::Entity")]
    OperatorSignature,
    #[sea_orm(has_many = "super::spark_burn::Entity")]
    SparkBurn,
    #[sea_orm(has_one = "super::spark_freeze_data::Entity")]
    SparkFreezeData,
    #[sea_orm(has_one = "super::spark_issue_data::Entity")]
    SparkIssueData,
    #[sea_orm(has_many = "super::spark_output::Entity")]
    SparkOutput,
    #[sea_orm(has_many = "super::user_signature::Entity")]
    UserSignature,
}

impl Related<super::operator_pubkey::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OperatorPubkey.def()
    }
}

impl Related<super::operator_signature::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OperatorSignature.def()
    }
}

impl Related<super::spark_burn::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SparkBurn.def()
    }
}

impl Related<super::spark_freeze_data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SparkFreezeData.def()
    }
}

impl Related<super::spark_issue_data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SparkIssueData.def()
    }
}

impl Related<super::spark_output::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SparkOutput.def()
    }
}

impl Related<super::user_signature::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserSignature.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
