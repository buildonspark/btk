//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "announcement_type")]
pub enum AnnouncementType {
    #[sea_orm(string_value = "issue")]
    Issue,
    #[sea_orm(string_value = "tx_freeze")]
    TxFreeze,
    #[sea_orm(string_value = "pubkey_freeze")]
    PubkeyFreeze,
    #[sea_orm(string_value = "transfer_ownership")]
    TransferOwnership,
    #[sea_orm(string_value = "token_pubkey")]
    TokenPubkey,
    #[sea_orm(string_value = "token_logo")]
    TokenLogo,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "l1_tx_status")]
pub enum L1TxStatus {
    #[sea_orm(string_value = "handling")]
    Handling,
    #[sea_orm(string_value = "attached")]
    Attached,
    #[sea_orm(string_value = "invalid_issue")]
    InvalidIssue,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "l1_tx_type")]
pub enum L1TxType {
    #[sea_orm(string_value = "issue")]
    Issue,
    #[sea_orm(string_value = "transfer")]
    Transfer,
    #[sea_orm(string_value = "spark_exit")]
    SparkExit,
    #[sea_orm(string_value = "announcement")]
    Announcement,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "mempool_status")]
pub enum MempoolStatus {
    #[sea_orm(string_value = "initialized")]
    Initialized,
    #[sea_orm(string_value = "waiting_mined")]
    WaitingMined,
    #[sea_orm(string_value = "pending")]
    Pending,
    #[sea_orm(string_value = "mined")]
    Mined,
    #[sea_orm(string_value = "attaching")]
    Attaching,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "operation_type")]
pub enum OperationType {
    #[sea_orm(string_value = "user_transfer")]
    UserTransfer,
    #[sea_orm(string_value = "user_burn")]
    UserBurn,
    #[sea_orm(string_value = "issuer_announce")]
    IssuerAnnounce,
    #[sea_orm(string_value = "issuer_mint")]
    IssuerMint,
    #[sea_orm(string_value = "issuer_transfer")]
    IssuerTransfer,
    #[sea_orm(string_value = "issuer_freeze")]
    IssuerFreeze,
    #[sea_orm(string_value = "issuer_unfreeze")]
    IssuerUnfreeze,
    #[sea_orm(string_value = "issuer_burn")]
    IssuerBurn,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "proof_type")]
pub enum ProofType {
    #[sea_orm(string_value = "spark_exit")]
    SparkExit,
    #[sea_orm(string_value = "p2tr")]
    P2tr,
    #[sea_orm(string_value = "p2wsh")]
    P2wsh,
    #[sea_orm(string_value = "p2wpkh")]
    P2wpkh,
    #[sea_orm(string_value = "empty")]
    Empty,
    #[sea_orm(string_value = "multisig")]
    Multisig,
    #[sea_orm(string_value = "lightning")]
    Lightning,
    #[sea_orm(string_value = "lightning_htlc")]
    LightningHtlc,
    #[sea_orm(string_value = "bulletproof")]
    Bulletproof,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "script_type")]
pub enum ScriptType {
    #[sea_orm(string_value = "p2tr")]
    P2tr,
    #[sea_orm(string_value = "p2wsh")]
    P2wsh,
    #[sea_orm(string_value = "p2wpkh")]
    P2wpkh,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "signature_type")]
pub enum SignatureType {
    #[sea_orm(string_value = "schnorr")]
    Schnorr,
    #[sea_orm(string_value = "ecdsa")]
    Ecdsa,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "status")]
pub enum Status {
    #[sea_orm(string_value = "started")]
    Started,
    #[sea_orm(string_value = "signed")]
    Signed,
    #[sea_orm(string_value = "finalized")]
    Finalized,
}
