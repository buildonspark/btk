//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use super::sea_orm_active_enums::L1TxStatus;
use super::sea_orm_active_enums::L1TxType;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "l1_transaction")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", unique)]
    pub txid: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub raw_tx: Vec<u8>,
    pub block_number: i64,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub block_hash: Vec<u8>,
    pub timestamp: i64,
    pub status: L1TxStatus,
    pub tx_type: L1TxType,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::announcement::Entity")]
    Announcement,
    #[sea_orm(has_one = "super::mempool_transaction::Entity")]
    MempoolTransaction,
    #[sea_orm(has_many = "super::proof::Entity")]
    Proof,
}

impl Related<super::announcement::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Announcement.def()
    }
}

impl Related<super::mempool_transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MempoolTransaction.def()
    }
}

impl Related<super::proof::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Proof.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
