// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SparkSignatureOutputData {
    #[prost(uint32, tag = "1")]
    pub spent_output_index: u32,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub revocation_private_key: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
/// This proto is constructed by the wallet to specify leaves it wants to create
/// as part of a token transaction.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenOutput {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub owner_public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub revocation_commitment: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "4")]
    pub withdrawal_bond_sats: u64,
    #[prost(uint64, tag = "5")]
    pub withdrawal_locktime: u64,
    #[prost(bytes = "vec", tag = "6")]
    pub token_public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "7")]
    pub token_amount: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, optional, tag = "8")]
    pub is_frozen: ::core::option::Option<bool>,
}
/// This proto is constructed by the wallet and is the core transaction data structure.
/// This proto is deterministically hashed to generate the token_transaction_hash that
/// is cooperatively signed by the SO group to confirm a token transaction.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenTransaction {
    #[prost(message, repeated, tag = "3")]
    pub token_outputs: ::prost::alloc::vec::Vec<TokenOutput>,
    #[prost(bytes = "vec", repeated, tag = "4")]
    pub spark_operator_identity_public_keys: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(enumeration = "Network", tag = "10")]
    pub network: i32,
    /// For mint transactions issuer_public_key will be specified without any leaves_to_spend.
    /// For transfer transactions the token amount in the input leaves must match the token amount in the output leaves.
    #[prost(oneof = "token_transaction::TokenInput", tags = "1, 2")]
    pub token_input: ::core::option::Option<token_transaction::TokenInput>,
}
/// Nested message and enum types in `TokenTransaction`.
pub mod token_transaction {
    /// For mint transactions issuer_public_key will be specified without any leaves_to_spend.
    /// For transfer transactions the token amount in the input leaves must match the token amount in the output leaves.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum TokenInput {
        #[prost(message, tag = "1")]
        MintInput(super::TokenMintInput),
        #[prost(message, tag = "2")]
        TransferInput(super::TokenTransferInput),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenTransferInput {
    #[prost(message, repeated, tag = "1")]
    pub outputs_to_spend: ::prost::alloc::vec::Vec<TokenOutputToSpend>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenMintInput {
    #[prost(bytes = "vec", tag = "1")]
    pub issuer_public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "2")]
    pub issuer_provided_timestamp: u64,
}
/// This proto is constructed by the wallet (without a revocation private key initially)
/// to specify leaves it wants to spend as part of a token transaction. Upon sending
/// the private key field will be filled and returned by the Coordinator SO so that the
/// wallet can validate the full transaction hash before finalizng the transaction.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenOutputToSpend {
    #[prost(bytes = "vec", tag = "1")]
    pub prev_token_transaction_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "2")]
    pub prev_token_transaction_vout: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FreezeTokensPayload {
    #[prost(bytes = "vec", tag = "1")]
    pub owner_public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub token_public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "3")]
    pub timestamp: u64,
    #[prost(bytes = "vec", tag = "4")]
    pub operator_identity_public_key: ::prost::alloc::vec::Vec<u8>,
    /// Set to false when requesting a freeze.
    #[prost(bool, tag = "5")]
    pub should_unfreeze: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenTransactionResponse {
    #[prost(bool, tag = "1")]
    pub finalized: bool,
    #[prost(message, optional, tag = "2")]
    pub final_token_transaction: ::core::option::Option<TokenTransaction>,
    #[prost(bytes = "vec", tag = "3")]
    pub final_token_transaction_hash: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(oneof = "transaction::Transaction", tags = "1, 2")]
    pub transaction: ::core::option::Option<transaction::Transaction>,
}
/// Nested message and enum types in `Transaction`.
pub mod transaction {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Transaction {
        #[prost(message, tag = "1")]
        OnChain(super::OnChainTransaction),
        #[prost(message, tag = "2")]
        Spark(super::SparkTransaction),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAllTokenTransactionsCursor {
    /// tx_hash of the last tx fetched
    #[prost(bytes = "vec", tag = "1")]
    pub last_transaction_hash: ::prost::alloc::vec::Vec<u8>,
    /// whether the last_tx_hash is on chain
    #[prost(enumeration = "Layer", tag = "2")]
    pub layer: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OnChainTokenOutput {
    #[prost(bytes = "vec", tag = "1")]
    pub raw_tx: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "2")]
    pub vout: u32,
    #[prost(uint64, tag = "3")]
    pub amount_sats: u64,
    #[prost(string, optional, tag = "4")]
    pub token_public_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub token_amount: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OnChainTransaction {
    #[prost(enumeration = "OperationType", tag = "1")]
    pub operation_type: i32,
    #[prost(bytes = "vec", tag = "2")]
    pub transaction_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub rawtx: ::prost::alloc::vec::Vec<u8>,
    #[prost(enumeration = "OnChainTransactionStatus", tag = "4")]
    pub status: i32,
    #[prost(message, repeated, tag = "5")]
    pub inputs: ::prost::alloc::vec::Vec<OnChainTokenOutput>,
    #[prost(message, repeated, tag = "6")]
    pub outputs: ::prost::alloc::vec::Vec<OnChainTokenOutput>,
    #[prost(message, optional, tag = "7")]
    pub broadcasted_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "8")]
    pub confirmed_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SparkTransaction {
    #[prost(enumeration = "OperationType", tag = "1")]
    pub operation_type: i32,
    #[prost(bytes = "vec", tag = "2")]
    pub transaction_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(enumeration = "SparkTransactionStatus", tag = "3")]
    pub status: i32,
    #[prost(message, optional, tag = "4")]
    pub confirmed_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, repeated, tag = "5")]
    pub leaves_to_create: ::prost::alloc::vec::Vec<SparkLeaf>,
    #[prost(message, repeated, tag = "6")]
    pub leaves_to_spend: ::prost::alloc::vec::Vec<SparkLeaf>,
    #[prost(bytes = "vec", repeated, tag = "7")]
    pub spark_operator_identity_public_keys: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SparkLeaf {
    #[prost(bytes = "vec", tag = "1")]
    pub token_public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub owner_public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub revocation_public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "5")]
    pub withdrawal_bond_sats: u64,
    #[prost(uint64, tag = "6")]
    pub withdrawal_locktime: u64,
    #[prost(bytes = "vec", tag = "7")]
    pub token_amount: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "8")]
    pub create_tx_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "9")]
    pub create_tx_vout_index: u32,
    #[prost(bytes = "vec", optional, tag = "10")]
    pub spend_tx_hash: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "11")]
    pub spend_tx_vout_index: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "12")]
    pub is_frozen: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Token {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub symbol: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub public_key: ::prost::alloc::string::String,
    #[prost(uint32, optional, tag = "4")]
    pub decimals: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "5")]
    pub is_freezable: ::core::option::Option<bool>,
    #[prost(bytes = "vec", optional, tag = "6")]
    pub max_supply: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", tag = "7")]
    pub total_supply: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "8")]
    pub l1_supply: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "9")]
    pub spark_supply: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "10")]
    pub total_owned_by_issuer: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "11")]
    pub total_frozen: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockInfo {
    #[prost(bytes = "vec", tag = "1")]
    pub block_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "2")]
    pub block_height: u32,
    #[prost(message, optional, tag = "4")]
    pub mined_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenPubkey {
    #[prost(bytes = "vec", tag = "1")]
    pub public_key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenPubkeyAnnouncement {
    #[prost(message, optional, tag = "1")]
    pub public_key: ::core::option::Option<TokenPubkey>,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub symbol: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    pub decimal: ::prost::alloc::vec::Vec<u8>,
    /// u128
    #[prost(bytes = "vec", tag = "5")]
    pub max_supply: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "6")]
    pub is_freezable: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignatureWithIndex {
    /// This is a Schnorr or ECDSA DER signature which can be between 64 and 73 bytes.
    #[prost(bytes = "vec", tag = "1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// The index of the TTXO associated with this signature.
    #[prost(uint32, tag = "2")]
    pub input_index: u32,
}
/// This message allows the sender of a leaf being spent to provide final evidence
/// that it owns a leaf to an SO when requesting signing and release of the  revocation keyshare.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperatorSpecificOwnerSignature {
    /// This is a Schnorr or ECDSA DER signature which can be between 64 and 73 bytes.
    #[prost(message, optional, tag = "1")]
    pub owner_signature: ::core::option::Option<SignatureWithIndex>,
    #[prost(message, optional, tag = "2")]
    pub payload: ::core::option::Option<OperatorSpecificTokenTransactionSignablePayload>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperatorSpecificTokenTransactionSignablePayload {
    #[prost(bytes = "vec", tag = "1")]
    pub final_token_transaction_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub operator_identity_public_key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SparkOperatorSignatureData {
    #[prost(bytes = "vec", tag = "1")]
    pub spark_operator_signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub operator_identity_public_key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Layer {
    L1 = 0,
    Spark = 1,
}
impl Layer {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::L1 => "L1",
            Self::Spark => "SPARK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "L1" => Some(Self::L1),
            "SPARK" => Some(Self::Spark),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OperationType {
    /// User operations
    UserTransfer = 0,
    UserBurn = 1,
    /// Issuer operations
    IssuerAnnounce = 2,
    IssuerMint = 3,
    IssuerTransfer = 4,
    IssuerFreeze = 5,
    IssuerUnfreeze = 6,
    IssuerBurn = 7,
}
impl OperationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UserTransfer => "USER_TRANSFER",
            Self::UserBurn => "USER_BURN",
            Self::IssuerAnnounce => "ISSUER_ANNOUNCE",
            Self::IssuerMint => "ISSUER_MINT",
            Self::IssuerTransfer => "ISSUER_TRANSFER",
            Self::IssuerFreeze => "ISSUER_FREEZE",
            Self::IssuerUnfreeze => "ISSUER_UNFREEZE",
            Self::IssuerBurn => "ISSUER_BURN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "USER_TRANSFER" => Some(Self::UserTransfer),
            "USER_BURN" => Some(Self::UserBurn),
            "ISSUER_ANNOUNCE" => Some(Self::IssuerAnnounce),
            "ISSUER_MINT" => Some(Self::IssuerMint),
            "ISSUER_TRANSFER" => Some(Self::IssuerTransfer),
            "ISSUER_FREEZE" => Some(Self::IssuerFreeze),
            "ISSUER_UNFREEZE" => Some(Self::IssuerUnfreeze),
            "ISSUER_BURN" => Some(Self::IssuerBurn),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OnChainTransactionStatus {
    Pending = 0,
    Confirmed = 1,
    WaitingMined = 2,
    Mined = 3,
    Attaching = 4,
    Attached = 5,
}
impl OnChainTransactionStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Pending => "PENDING",
            Self::Confirmed => "CONFIRMED",
            Self::WaitingMined => "WAITING_MINED",
            Self::Mined => "MINED",
            Self::Attaching => "ATTACHING",
            Self::Attached => "ATTACHED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PENDING" => Some(Self::Pending),
            "CONFIRMED" => Some(Self::Confirmed),
            "WAITING_MINED" => Some(Self::WaitingMined),
            "MINED" => Some(Self::Mined),
            "ATTACHING" => Some(Self::Attaching),
            "ATTACHED" => Some(Self::Attached),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SparkTransactionStatus {
    Started = 0,
    Signed = 1,
    Finalized = 2,
}
impl SparkTransactionStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Started => "STARTED",
            Self::Signed => "SIGNED",
            Self::Finalized => "FINALIZED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STARTED" => Some(Self::Started),
            "SIGNED" => Some(Self::Signed),
            "FINALIZED" => Some(Self::Finalized),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Network {
    Mainnet = 0,
    Regtest = 1,
    Testnet = 2,
    Signet = 3,
}
impl Network {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Mainnet => "MAINNET",
            Self::Regtest => "REGTEST",
            Self::Testnet => "TESTNET",
            Self::Signet => "SIGNET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAINNET" => Some(Self::Mainnet),
            "REGTEST" => Some(Self::Regtest),
            "TESTNET" => Some(Self::Testnet),
            "SIGNET" => Some(Self::Signet),
            _ => None,
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevocationSecretWithIndex {
    #[prost(uint32, tag = "1")]
    pub input_index: u32,
    #[prost(bytes = "vec", tag = "2")]
    pub revocation_secret: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendSparkSignatureRequest {
    #[prost(message, optional, tag = "1")]
    pub final_token_transaction: ::core::option::Option<TokenTransaction>,
    #[prost(message, repeated, tag = "2")]
    pub operator_specific_signatures: ::prost::alloc::vec::Vec<
        OperatorSpecificOwnerSignature,
    >,
    #[prost(message, optional, tag = "3")]
    pub operator_signature_data: ::core::option::Option<SparkOperatorSignatureData>,
    #[prost(message, repeated, tag = "4")]
    pub revocation_secrets: ::prost::alloc::vec::Vec<RevocationSecretWithIndex>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSparkTxRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub final_token_transaction_hash: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifySparkTxRequest {
    #[prost(message, optional, tag = "1")]
    pub final_token_transaction: ::core::option::Option<TokenTransaction>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSparkTxsRequest {
    #[prost(bytes = "vec", optional, tag = "1")]
    pub page_token: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "2")]
    pub page_size: ::core::option::Option<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWithdrawnOutputsRequest {
    #[prost(bytes = "vec", optional, tag = "1")]
    pub blockhash: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(string, optional, tag = "2")]
    pub page_token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub page_size: ::core::option::Option<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSparkTxsResponse {
    #[prost(message, repeated, tag = "1")]
    pub token_transactions: ::prost::alloc::vec::Vec<TokenTransactionResponse>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub next_page_token: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWithdrawnOutputsResponse {
    #[prost(message, repeated, tag = "1")]
    pub outputs: ::prost::alloc::vec::Vec<TokenOutput>,
    #[prost(string, optional, tag = "2")]
    pub next_page_token: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSparkTxResponse {
    #[prost(message, optional, tag = "1")]
    pub final_token_transaction: ::core::option::Option<TokenTransaction>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FreezeTokensRequest {
    #[prost(message, optional, tag = "1")]
    pub freeze_tokens_payload: ::core::option::Option<FreezeTokensPayload>,
    #[prost(bytes = "vec", tag = "2")]
    pub issuer_signature: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FreezeTokensResponse {
    #[prost(string, repeated, tag = "1")]
    pub impacted_output_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Decoded uint128
    #[prost(bytes = "vec", repeated, tag = "2")]
    pub impacted_token_amount: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAllTokenTransactionsRequest {
    #[prost(message, optional, tag = "1")]
    pub cursor: ::core::option::Option<ListAllTokenTransactionsCursor>,
    #[prost(uint32, optional, tag = "2")]
    pub page_size: ::core::option::Option<u32>,
    /// optional filters
    #[prost(bytes = "vec", optional, tag = "3")]
    pub owner_public_key: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub token_public_key: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(message, optional, tag = "5")]
    pub before_timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "6")]
    pub after_timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(enumeration = "OperationType", repeated, tag = "7")]
    pub operation_types: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAllTokenTransactionsResponse {
    #[prost(message, repeated, tag = "1")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
    #[prost(message, optional, tag = "2")]
    pub next_cursor: ::core::option::Option<ListAllTokenTransactionsCursor>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockInfoResponse {
    #[prost(message, optional, tag = "1")]
    pub block_info: ::core::option::Option<BlockInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendRawTxRequest {
    #[prost(string, tag = "1")]
    pub tx: ::prost::alloc::string::String,
    #[prost(uint64, optional, tag = "2")]
    pub max_burn_amount: ::core::option::Option<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTokenPubkeyInfoRequest {
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub public_keys: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTokenPubkeyInfoResponse {
    #[prost(message, repeated, tag = "1")]
    pub token_pubkey_infos: ::prost::alloc::vec::Vec<TokenPubkeyInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenPubkeyInfo {
    #[prost(message, optional, tag = "1")]
    pub announcement: ::core::option::Option<TokenPubkeyAnnouncement>,
    #[prost(bytes = "vec", tag = "2")]
    pub total_supply: ::prost::alloc::vec::Vec<u8>,
    /// scriptbuf
    #[prost(bytes = "vec", optional, tag = "3")]
    pub owner: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(string, optional, tag = "4")]
    pub logo_url: ::core::option::Option<::prost::alloc::string::String>,
}
/// Generated server implementations.
pub mod spark_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with SparkServiceServer.
    #[async_trait]
    pub trait SparkService: std::marker::Send + std::marker::Sync + 'static {
        async fn send_spark_signature(
            &self,
            request: tonic::Request<super::SendSparkSignatureRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn list_spark_txs(
            &self,
            request: tonic::Request<super::ListSparkTxsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListSparkTxsResponse>,
            tonic::Status,
        >;
        async fn list_transactions(
            &self,
            request: tonic::Request<super::ListAllTokenTransactionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListAllTokenTransactionsResponse>,
            tonic::Status,
        >;
        async fn list_withdrawn_outputs(
            &self,
            request: tonic::Request<super::ListWithdrawnOutputsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListWithdrawnOutputsResponse>,
            tonic::Status,
        >;
        async fn get_spark_tx(
            &self,
            request: tonic::Request<super::GetSparkTxRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSparkTxResponse>,
            tonic::Status,
        >;
        async fn verify_spark_tx(
            &self,
            request: tonic::Request<super::VerifySparkTxRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn freeze_tokens(
            &self,
            request: tonic::Request<super::FreezeTokensRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FreezeTokensResponse>,
            tonic::Status,
        >;
        async fn get_last_indexed_block_info(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::BlockInfoResponse>,
            tonic::Status,
        >;
        async fn send_raw_lrc_transaction(
            &self,
            request: tonic::Request<super::SendRawTxRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn get_token_pubkey_info(
            &self,
            request: tonic::Request<super::GetTokenPubkeyInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTokenPubkeyInfoResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct SparkServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> SparkServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for SparkServiceServer<T>
    where
        T: SparkService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/rpc.v1.SparkService/SendSparkSignature" => {
                    #[allow(non_camel_case_types)]
                    struct SendSparkSignatureSvc<T: SparkService>(pub Arc<T>);
                    impl<
                        T: SparkService,
                    > tonic::server::UnaryService<super::SendSparkSignatureRequest>
                    for SendSparkSignatureSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SendSparkSignatureRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SparkService>::send_spark_signature(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SendSparkSignatureSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rpc.v1.SparkService/ListSparkTxs" => {
                    #[allow(non_camel_case_types)]
                    struct ListSparkTxsSvc<T: SparkService>(pub Arc<T>);
                    impl<
                        T: SparkService,
                    > tonic::server::UnaryService<super::ListSparkTxsRequest>
                    for ListSparkTxsSvc<T> {
                        type Response = super::ListSparkTxsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListSparkTxsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SparkService>::list_spark_txs(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSparkTxsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rpc.v1.SparkService/ListTransactions" => {
                    #[allow(non_camel_case_types)]
                    struct ListTransactionsSvc<T: SparkService>(pub Arc<T>);
                    impl<
                        T: SparkService,
                    > tonic::server::UnaryService<super::ListAllTokenTransactionsRequest>
                    for ListTransactionsSvc<T> {
                        type Response = super::ListAllTokenTransactionsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ListAllTokenTransactionsRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SparkService>::list_transactions(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListTransactionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rpc.v1.SparkService/ListWithdrawnOutputs" => {
                    #[allow(non_camel_case_types)]
                    struct ListWithdrawnOutputsSvc<T: SparkService>(pub Arc<T>);
                    impl<
                        T: SparkService,
                    > tonic::server::UnaryService<super::ListWithdrawnOutputsRequest>
                    for ListWithdrawnOutputsSvc<T> {
                        type Response = super::ListWithdrawnOutputsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListWithdrawnOutputsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SparkService>::list_withdrawn_outputs(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListWithdrawnOutputsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rpc.v1.SparkService/GetSparkTx" => {
                    #[allow(non_camel_case_types)]
                    struct GetSparkTxSvc<T: SparkService>(pub Arc<T>);
                    impl<
                        T: SparkService,
                    > tonic::server::UnaryService<super::GetSparkTxRequest>
                    for GetSparkTxSvc<T> {
                        type Response = super::GetSparkTxResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetSparkTxRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SparkService>::get_spark_tx(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSparkTxSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rpc.v1.SparkService/VerifySparkTx" => {
                    #[allow(non_camel_case_types)]
                    struct VerifySparkTxSvc<T: SparkService>(pub Arc<T>);
                    impl<
                        T: SparkService,
                    > tonic::server::UnaryService<super::VerifySparkTxRequest>
                    for VerifySparkTxSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::VerifySparkTxRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SparkService>::verify_spark_tx(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = VerifySparkTxSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rpc.v1.SparkService/FreezeTokens" => {
                    #[allow(non_camel_case_types)]
                    struct FreezeTokensSvc<T: SparkService>(pub Arc<T>);
                    impl<
                        T: SparkService,
                    > tonic::server::UnaryService<super::FreezeTokensRequest>
                    for FreezeTokensSvc<T> {
                        type Response = super::FreezeTokensResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FreezeTokensRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SparkService>::freeze_tokens(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FreezeTokensSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rpc.v1.SparkService/GetLastIndexedBlockInfo" => {
                    #[allow(non_camel_case_types)]
                    struct GetLastIndexedBlockInfoSvc<T: SparkService>(pub Arc<T>);
                    impl<T: SparkService> tonic::server::UnaryService<()>
                    for GetLastIndexedBlockInfoSvc<T> {
                        type Response = super::BlockInfoResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SparkService>::get_last_indexed_block_info(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetLastIndexedBlockInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rpc.v1.SparkService/SendRawLrcTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct SendRawLrcTransactionSvc<T: SparkService>(pub Arc<T>);
                    impl<
                        T: SparkService,
                    > tonic::server::UnaryService<super::SendRawTxRequest>
                    for SendRawLrcTransactionSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SendRawTxRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SparkService>::send_raw_lrc_transaction(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SendRawLrcTransactionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rpc.v1.SparkService/GetTokenPubkeyInfo" => {
                    #[allow(non_camel_case_types)]
                    struct GetTokenPubkeyInfoSvc<T: SparkService>(pub Arc<T>);
                    impl<
                        T: SparkService,
                    > tonic::server::UnaryService<super::GetTokenPubkeyInfoRequest>
                    for GetTokenPubkeyInfoSvc<T> {
                        type Response = super::GetTokenPubkeyInfoResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTokenPubkeyInfoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SparkService>::get_token_pubkey_info(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTokenPubkeyInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for SparkServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "rpc.v1.SparkService";
    impl<T> tonic::server::NamedService for SparkServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
